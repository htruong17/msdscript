LIBRARY DESCRIPTION

MSDScript is an interpreter library built with C++. It is designed to operate a wide variety of functionalities through specific keywords in command line. 

This library can perform the following:
-Addition
-Multiplication
-Functions
-Expression Comparison
-Print/Pretty-Print

The following modes are available:
—help: lists available mode for library
—test: runs a series of test to verify that built-in functions are working as expected
—interp: interprets expression string for result
—step: similar to interp mode but uses explicit continuation instead of relying on C++ stack
—print: prints out a condensed expression string
—pretty-print: prints out the expression string that is more legible with proper spacing and usages of parenthesies

GETTING STARTED

To build and create the executable ‘msdscript’ file, ensure that the directory in terminal contains the Makefile and the source files. 
In terminal, type the command “make”. The file created is named “msdscript”.

To build a library file for MSDScript, run the following commands in terminal:
ar -ruv libmsdscript.a cont.o env.o expr.o parse.o step.o val.o cmdline.o test.o
The library file is named “libmsdscript.a”.
Note* need to run make first to generate .o files

USING MSDSCRIPT EXECUTABLE

To run the executable file in terminal, enter the command

./msdscript —mode (the mode is specify with two hyphens and the keyword)

For example, interp mode can be accessed with the following command:
./msdscript —interp

USING MSDSCRIPT LIBRARY FILE

The library file allows for MSDScript to be linked to different programs for specific needs. For example, MSDScript library can be used to assign the day of the week to host a meeting. 
To link the library with the which_day program, the following command is used:

c++ -o which_day which_day.cpp libmsdscript.a

which_day is the name of the executable file that we have chosen
which_day.cpp is the C++ file for the program
libmsdscript.a is the MSDScript library that we created beforehand

In this example, if we run the command:

./which_day 13

The result will be a 4. This means that on the 14th week (week starts from 0) of the year, the day 4 of that week is when the meeting will occur. Sunday is day 0 so day 4 will be a Thursday.

BUILT-IN FUNCTIONS

When writing expression strings, the following keywords are available:

+ means addition
* means multiplication
== means equality; used to compare integer values or booleans
_let binds a value expression to a variable name in which the variable name can be used in the body of the _let expression
_if allows for conditional representation of two different expressions. One expression will run if the condition state is true while the other will run if the condition is false
_true means “true” boolean
_false means “false” boolean
_fun allows for function expressions with variable name. Function calls will replace variable with designated variable expression.

EXAMPLES FOR EACH BUILT-IN FUNCTIONS

ADDITION

1 + 1

Result: 2

MULTIPLICATION

2 * 3

Result: 6

EQUALITY

2 == 2 or _true == _true

Result: _true

2 == 3 or _false == _true

Result: _false

LET

_let x = 1 _in x + 4

Result: 5

IF

_if //condition _then //do this _else //do that

_if 3==3 _then 3*3 _else 3+3

Result: 6

FUNCTIONS

_fun (x) x + 24

To call the function, use the format f(value) I.e…

(_fun (x) x + 24) (3) 

Result: 27

MSDSCRIPT API

expr.cpp and expr.h: Main files for expression
val.cpp and val.h: Represent value as val; mainly for interp
env.cpp and env.h: Environment for referencing of values; similar to substitution functionality
cont.cpp and cont.h: Allows for step mode that avoids using C++ stack to prevent segmentation faults for large recursive expressions
step.cpp and step.h: Allows for step mode interpretation
parse.cpp and parse.h: Used to parse strings into expressions
cmdline.cpp and cmdline.h: Allows for specific calls of the different modes available for MSDScript
pointer.h: Shared pointers used to help with memory leaks
catch.h: Testing library for testing purposes

POTENTIAL ERRORS

Segmentation faults may occur in interp mode if the recursive expression is too large. Use step mode instead.
Multiplication and addition cannot be used on other expressions besides number expression

REPORT A BUG OR QUESTIONS/CONCERNS

Please send a direct message to htruong17 on GitHub or email at harold.truong@gmail.com